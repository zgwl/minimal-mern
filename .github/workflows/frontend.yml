name: Frontend CI/CD

on:
  push:
    branches:
      - main
    paths:
      - "frontend/**"
  pull_request:
    branches:
      - main
    paths:
      - "frontend/**"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      ECS_CLUSTER: minimal-mern-ecs-cluster-6
      ECS_SERVICE: minimal-mern-ecs-cluster-6-service
      ECR_REPOSITORY: minimal-mern-ecr
      AWS_REGION: us-west-2

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "20.x"
      - run: cd frontend && npm install
      - run: cd frontend && npm run test
      - run: cd frontend && npm run build

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image to Amazon ECR
        run: |
          cd frontend
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Clean up old images from ECR
        run: |
          images_to_delete=$(
            aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} \
            --query 'sort_by(imageDetails,& imagePushedAt)[3:].imageDigest' \
            --output text
          )
          for digest in $images_to_delete;
          do
            aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageDigest=$digest
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
